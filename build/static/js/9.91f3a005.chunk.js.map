{"version":3,"sources":["components/header/search/SuggestionAutocomplete.js","components/header/search/LocationAutoComplete.js","components/header/search/SearchBar.js"],"names":["SuggestionAutocomplete","className","type","memo","useState","addressPlaceholder","setAddressPlaceholder","useContext","locationContext","address","location","lat","long","setLocation","onError","useCallback","status","clearSuggestions","handleToast","handleChange","add","handleSelect","localStorage","setItem","geocodeByAddress","then","results","getLatLng","latLng","lng","catch","error","console","log","showPosition","position","posX","coords","latitude","posY","longitude","currentLocation","locAPI","axios","get","response","data","formatted_address","finally","handleError","errMsg","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","UNKNOWN_ERROR","message","toastType","toast","dark","POSITION","BOTTOM_CENTER","value","onChange","onSelect","searchOptions","types","componentRestrictions","country","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","autoFocus","required","map","suggestion","key","id","description","onClick","navigator","geolocation","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","alert","SearchBar"],"mappings":"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","file":"static/js/9.91f3a005.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../../../styles/styles.css\";\n\nconst SuggestionAutocomplete = () => {\n  return (\n    <div className=\"fcol w-100 h-100\">\n      <div className=\"fc\">\n        <i className=\"fas fa-search\"></i>\n        <input type=\"text\" />\n      </div>\n      <div className=\"fcol\"></div>\n    </div>\n  );\n};\n\nexport default SuggestionAutocomplete;\n","import React, { memo, useContext, useCallback, useState } from \"react\";\nimport \"../../../styles/styles.css\";\n\nimport { locationContext } from \"../../../App\";\n\nimport { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport PlacesAutocomplete from \"react-places-autocomplete\";\nimport axios from \"axios\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nconst API_KEY = \"AIzaSyDEoiDfpQW73648IFxcQUNIupKCOJKf6IQ\";\n\nconst LocationAutoComplete = () => {\n  // local state management\n  const [addressPlaceholder, setAddressPlaceholder] = useState(\n    \"Enter location\"\n  );\n\n  // using imported context\n  const { address, lat, long, location, setLocation } = useContext(\n    locationContext\n  );\n\n  // Log error status and clear dropdown when Google Maps API returns an error.\n  const onError = useCallback((status, clearSuggestions) => {\n    handleToast(\n      \"Google Maps API returned error with status: \" + status,\n      \"error\"\n    );\n    clearSuggestions();\n  }, []);\n\n  // limit the results to below constraints only\n  const searchOptions = {\n    types: [\"address\"],\n    componentRestrictions: {\n      country: [\"in\"],\n    },\n  };\n\n  // handleChange\n  const handleChange = useCallback(\n    (add) => {\n      setLocation(() => {\n        return {\n          ...location,\n          address: add,\n        };\n      });\n    },\n    [location, setLocation]\n  );\n\n  // handleSelect\n  const handleSelect = useCallback(\n    (add) => {\n      localStorage.setItem(\"address\", add);\n      geocodeByAddress(add)\n        .then((results) => getLatLng(results[0]))\n        .then((latLng) => {\n          localStorage.setItem(\"lat\", latLng.lat);\n          localStorage.setItem(\"long\", latLng.lng);\n          setLocation(() => {\n            return {\n              address: add,\n              lat: latLng.lat,\n              long: latLng.lng,\n            };\n          });\n        })\n        .catch((error) => console.log(\"Address selection error: \", error));\n    },\n    [setLocation]\n  );\n\n  // --------------------------------------------------\n  // ---------LOCATION SEARCH BLOCK STARTS HERE--------\n  const getLocation = () => {\n    if (navigator.geolocation) {\n      setAddressPlaceholder(() => {\n        return \"Locating...\";\n      });\n      navigator.geolocation.getCurrentPosition(showPosition, handleError, {\n        enableHighAccuracy: true,\n        timeout: 15000,\n        maximumAge: 0,\n      });\n    } else {\n      alert(\n        \"This feature isn't supported. Try manually searching the address...\"\n      );\n    }\n  };\n\n  const showPosition = (position) => {\n    let posX = position.coords.latitude;\n    let posY = position.coords.longitude;\n\n    localStorage.setItem(\"lat\", posX);\n    localStorage.setItem(\"long\", posY);\n\n    setLocation(() => {\n      return {\n        ...location,\n        lat: posX,\n        long: posY,\n      };\n    });\n\n    let currentLocation = \"\";\n\n    let locAPI =\n      \"https://maps.googleapis.com/maps/api/geocode/json?latlng=\" +\n      posX +\n      \",\" +\n      posY +\n      \"&key=\" +\n      API_KEY;\n\n    axios\n      .get(locAPI)\n      .then((response) => {\n        currentLocation = response.data.results[0].formatted_address;\n        // setting location box status to locating\n        localStorage.setItem(\"address\", currentLocation);\n        setLocation(() => {\n          return {\n            ...location,\n            address: currentLocation,\n          };\n        });\n        handleToast(currentLocation, \"dark\");\n      })\n      .catch((error) => {\n        handleToast(error, \"error\");\n      })\n      .finally();\n  };\n\n  const handleError = (error) => {\n    let errMsg = \"\";\n    switch (error.code) {\n      case error.PERMISSION_DENIED:\n        errMsg =\n          \"PERMISSION_DENIED. Allow website to use location in site settings...\";\n        break;\n      case error.POSITION_UNAVAILABLE:\n        errMsg =\n          \"POSITION_UNAVAILABLE. Your current position is unavailable, please enter your location manually...\";\n        break;\n      case error.TIMEOUT:\n        errMsg = \"Server timed out. Make sure Location service is turned on...\";\n        break;\n      case error.UNKNOWN_ERROR:\n        errMsg = \"UNKNOWN_ERROR. Error code: 0\";\n        break;\n\n      default:\n        errMsg =\n          \"Something unexpected happened. We couldn't process your request...\";\n        break;\n    }\n    // setting location box status to locating\n    setAddressPlaceholder(() => {\n      return \"Couldn't locate...\";\n    });\n    handleToast(errMsg, \"error\");\n  };\n\n  const handleToast = (message, toastType) => {\n    if (toastType === \"dark\") {\n      toast.dark(message, {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    } else if (toastType === \"error\") {\n      toast.error(message, {\n        position: toast.POSITION.BOTTOM_CENTER,\n      });\n    } else {\n      toast(message);\n    }\n  };\n\n  // ----------LOCATION SEARCH BLOCK ENDS HERE---------\n  // --------------------------------------------------\n\n  return (\n    <div>\n      <PlacesAutocomplete\n        value={address}\n        onChange={handleChange}\n        onSelect={handleSelect}\n        onError={onError}\n        searchOptions={searchOptions}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div className=\"autocomplete_places_main_outer_div\">\n            <input\n              {...getInputProps({\n                placeholder: addressPlaceholder,\n                className: \"location_search_input\",\n                autoFocus: false,\n                required: true,\n              })}\n            />\n            <div className=\"autocomplete_dropdown_container\">\n              {loading && (\n                <div className=\"loading_location_div\">\n                  Loading... <i className=\"fas fa-circle-notch fa-spin\"></i>\n                </div>\n              )}\n              {suggestions.map((suggestion) => {\n                const className = \"suggestion_item\";\n                return (\n                  <div\n                    key={suggestion.id}\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                    })}\n                  >\n                    <div className=\"suggestion_desc\">\n                      {suggestion.description}\n                    </div>\n                    <div className=\"up_left_arrow\">\n                      <i className=\"fas fa-arrow-left\"></i>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n      {/* location utility btn */}\n      <div className=\"searchbar_utility_btn_location\" onClick={getLocation}>\n        <i className=\"fas fa-crosshairs\"></i>\n      </div>\n      <ToastContainer />\n    </div>\n  );\n};\n\nexport default memo(LocationAutoComplete);\n","import React from \"react\";\n\nimport SuggestionAutocomplete from \"./SuggestionAutocomplete\";\nimport LocationAutoComplete from \"./LocationAutoComplete\";\n\nconst SearchBar = () => {\n  return (\n    <div className=\"h-100 w-100 fc\">\n      <SuggestionAutocomplete />\n      <LocationAutoComplete />\n    </div>\n  );\n};\n\nexport default SearchBar;\n"],"sourceRoot":""}